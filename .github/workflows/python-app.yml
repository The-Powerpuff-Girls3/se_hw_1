# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-json
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest --json=results.json || { echo "pytest failed"; exit 1; }
    - name: Generate badge URLs
      id: badge
      run: |
        if [ -f results.json ]; then
          total_tests=$(jq '.summary.num_tests' results.json)
          passed_tests=$(jq '.summary.passed' results.json)
          failed_tests=$(jq '.summary.failed' results.json)

          if [ "$failed_tests" -eq 0 ]; then
            badge_text="passing"
            badge_color="brightgreen"
          else
            badge_text="failing"
            badge_color="red"
          fi

          pytest_badge="https://img.shields.io/badge/tests-${badge_text}-${badge_color}"
          echo "pytest_badge=$pytest_badge" >> $GITHUB_ENV
        else
          echo "results.json not found. Setting badge to unknown."
          pytest_badge="https://img.shields.io/badge/tests-unknown-lightgray"
          echo "pytest_badge=$pytest_badge" >> $GITHUB_ENV
        fi
    - name: Update README with badge
      run: |
        sed -i "s|!\\[Pytest\\](.*)|![Pytest](${{ env.pytest_badge }})|g" README.md
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add README.md
        git commit -m "docs: update README.md with latest pytest badge" || echo "No changes to commit"

    - name: Push README changes
      uses: ad-m/github-push-action@master
      if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
